// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.663
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Map(title string, tripsData string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templ.JSONScript("jsonData", tripsData).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<html><head><meta charset=\"utf-8\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/Map.templ`, Line: 8, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</title><meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"><script src=\"https://api.mapbox.com/mapbox-gl-js/v3.5.2/mapbox-gl.js\"></script><link href=\"https://api.mapbox.com/mapbox-gl-js/v3.5.2/mapbox-gl.css\" rel=\"stylesheet\"><script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script><style>\n    body {\n      margin: 0;\n      padding: 0;\n    }\n\n    #map {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      width: 100%;\n    }\n\n    #layer-switcher {\n      position: absolute;\n      top: 10px;\n      left: 10px;\n      background: white;\n      padding: 10px;\n      border-radius: 3px;\n    }\n\n    #trip-selector {\n      position: absolute;\n      top: 10px;\n      right: 10px;\n      background: white;\n      padding: 10px;\n      border-radius: 3px;\n    }\n\n    #elevation-graph {\n      position: absolute;\n      bottom: 10px;\n      left: 10px;\n      right: 10px;\n      background: rgba(255, 255, 255, 0.8);\n      padding: 10px;\n      border-radius: 3px;\n      height: 200px;\n    }\n  </style></head><body><div id=\"map\"></div><div id=\"layer-switcher\"><button id=\"map-button\">Map</button> <button id=\"satellite-button\">Satellite</button></div><div id=\"trip-selector\"><select id=\"trip-select\"></select></div><div id=\"elevation-graph\"><canvas id=\"elevation-chart\"></canvas></div><script>\n    const trips = JSON.parse(JSON.parse(document.getElementById('jsonData').textContent));\n    let currentTrip = trips[0];\n    console.log(currentTrip)\n    let map, elevationChart;\n\n    mapboxgl.accessToken = 'pk.eyJ1Ijoib2xpdmVyYnV0bGVyIiwiYSI6ImNsZ3NpZmlvazAxb2Mzc281dXJvb20weGgifQ.yov1u2Efo_v7ImCH2o9pGg';\n\n    map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/oliverbutler/cllz4ea1c00n701pbbqah10qo',\n      center: [-2.9263, 54.5441],\n      zoom: 12,\n      pitch: 60,\n      bearing: 30\n    });\n\n    function initializeTripSelector() {\n      const select = document.getElementById('trip-select');\n      trips.forEach((trip, index) => {\n        const option = document.createElement('option');\n        option.value = index;\n        option.textContent = trip.name;\n        select.appendChild(option);\n      });\n      select.addEventListener('change', (e) => {\n        currentTrip = trips[e.target.value];\n        updateMap();\n        updateElevationChart();\n      });\n    }\n\n    function updateMap() {\n      // Clear existing layers and sources\n      if (map.getLayer('hike-tracks')) map.removeLayer('hike-tracks');\n      if (map.getLayer('camp-locations')) map.removeLayer('camp-locations');\n      if (map.getSource('hike-tracks')) map.removeSource('hike-tracks');\n      if (map.getSource('camp-locations')) map.removeSource('camp-locations');\n\n      // Clear markers\n      map._markers.forEach(marker => marker.remove());\n\n      // Add hike tracks\n      const hikeFeatures = currentTrip.events\n        .filter(event => event.type === \"hike\")\n        .map(hike => ({\n          type: 'Feature',\n          properties: {},\n          geometry: {\n            type: 'LineString',\n            coordinates: hike.trackPoints.map(point => [point.lon, point.lat, point.ele])\n          }\n        }));\n\n      map.addSource('hike-tracks', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: hikeFeatures\n        }\n      });\n\n\n      map.addLayer({\n        id: 'hike-tracks',\n        type: 'line',\n        source: 'hike-tracks',\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round'\n        },\n        paint: {\n          'line-color': '#ff0000',\n          'line-width': 3\n        }\n      });\n\n      // Add camp locations\n      const campFeatures = currentTrip.events\n        .filter(event => event.type === \"camp\")\n        .map(camp => ({\n          type: 'Feature',\n          properties: {name: camp.name},\n          geometry: {\n            type: 'Point',\n            coordinates: [camp.lon, camp.lat]\n          }\n        }));\n\n      map.addSource('camp-locations', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: campFeatures\n        }\n      });\n\n      map.addLayer({\n        id: 'camp-locations',\n        type: 'circle',\n        source: 'camp-locations',\n        paint: {\n          'circle-radius': 6,\n          'circle-color': '#4CAF50'\n        }\n      });\n\n      // Fit map to bounds of all events\n      const bounds = new mapboxgl.LngLatBounds();\n      currentTrip.events.forEach(event => {\n        if (event.type === \"hike\") {\n          event.trackPoints.forEach(point => {\n            bounds.extend([point.lon, point.lat]);\n          });\n        } else if (event.type === \"camp\") {\n          bounds.extend([event.lon, event.lat]);\n        }\n      });\n\n      map.fitBounds(bounds, {\n        padding: 50,\n        pitch: 60,\n        bearing: 30,\n        duration: 2000\n      });\n\n\n      const start = currentTrip.events.find(event => event.type === \"hike\").trackPoints[0];\n\n      new mapboxgl.Marker({color: '#008000'})\n        .setLngLat([start.lon, start.lat])\n        .addTo(map);\n\n      const lastHike = currentTrip.events.filter(event => event.type === \"hike\").pop();\n\n      const end = lastHike.trackPoints[lastHike.trackPoints.length - 1];\n\n      new mapboxgl.Marker({color: '#FF0000'})\n        .setLngLat([end.lon, end.lat])\n        .addTo(map);\n\n      const camps = currentTrip.events.filter(event => event.type === \"camp\");\n\n      camps.forEach(camp => {\n        new mapboxgl.Marker({color: '#0000FF'})\n          .setLngLat([camp.lon, camp.lat])\n          .setPopup(new mapboxgl.Popup().setHTML(`<h3>${camp.name}</h3>`))\n          .addTo(map);\n      });\n    }\n\n    function updateElevationChart() {\n      const ctx = document.getElementById('elevation-chart').getContext('2d');\n\n      let allPoints = [];\n      let cumulativeDistance = 0;\n\n      currentTrip.events.forEach((event, index) => {\n        if (event.type === \"hike\") {\n          event.trackPoints.forEach(point => {\n            allPoints.push({\n              x: cumulativeDistance + point.cumDistance,\n              y: point.ele,\n              lon: point.lon,\n              lat: point.lat\n            });\n          });\n          cumulativeDistance += event.trackPoints[event.trackPoints.length - 1].cumDistance;\n        } else if (event.type === \"camp\") {\n          allPoints.push({\n            x: cumulativeDistance,\n            y: event.alt,\n            lon: event.lon,\n            lat: event.lat,\n            isCamp: true,\n            name: event.name\n          });\n        }\n      });\n\n      const maxDistance = Math.ceil(cumulativeDistance);\n      const labels = Array.from({length: maxDistance + 1}, (_, i) => i);\n\n      if (elevationChart) {\n        elevationChart.destroy();\n      }\n\n      elevationChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Elevation',\n            data: allPoints,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1,\n            pointRadius: (context) => allPoints[context.dataIndex].isCamp ? 6 : 0,\n            pointBackgroundColor: (context) => allPoints[context.dataIndex].isCamp ? '#4CAF50' : 'rgb(75, 192, 192)'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: 'linear',\n              title: {\n                display: true,\n                text: 'Distance (km)'\n              },\n              ticks: {\n                stepSize: 1,\n                callback: function (value, index, values) {\n                  return value.toFixed(0);\n                }\n              },\n              min: 0,\n              max: maxDistance\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Elevation (m)'\n              }\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                title: function (context) {\n                  const point = allPoints[context[0].dataIndex];\n                  if (point.isCamp) {\n                    return `Camp: ${point.name}`;\n                  }\n                  return `Distance: ${point.x.toFixed(2)} km`;\n                },\n                label: function (context) {\n                  return `Elevation: ${context.parsed.y.toFixed(0)} m`;\n                }\n              }\n            }\n          },\n          onClick: (event, elements) => {\n            if (elements.length > 0) {\n              const index = elements[0].index;\n              const point = allPoints[index];\n              map.flyTo({\n                center: [point.lon, point.lat],\n                zoom: 14,\n                pitch: 60,\n                bearing: 30,\n                duration: 1000\n              });\n            }\n          }\n        }\n      });\n    }\n\n    map.on('load', () => {\n      initializeTripSelector();\n      updateMap();\n      updateElevationChart();\n\n      // Layer switcher functionality\n      document.getElementById('map-button').addEventListener('click', () => {\n        map.setStyle('mapbox://styles/oliverbutler/cllz4ea1c00n701pbbqah10qo');\n      });\n\n      document.getElementById('satellite-button').addEventListener('click', () => {\n        map.setStyle('mapbox://styles/oliverbutler/cm0cp3xo200tc01qt51wieggw');\n      });\n\n      map.on('style.load', () => {\n        updateMap();\n      });\n    });\n  </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
