package templates

templ Map(title string, geoJSONData string) {
	@templ.JSONScript("jsonData", geoJSONData)
	<html>
		<head>
			<meta charset="utf-8"/>
			<title>{ title }</title>
			<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"/>
			<script src="https://api.mapbox.com/mapbox-gl-js/v3.5.2/mapbox-gl.js"></script>
			<link href="https://api.mapbox.com/mapbox-gl-js/v3.5.2/mapbox-gl.css" rel="stylesheet"/>
			<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
			<style>
    body {
      margin: 0;
      padding: 0;
    }

    #map {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
    }

    #layer-switcher {
      position: absolute;
      top: 10px;
      left: 10px;
      z-index: 1;
      background: white;
      padding: 10px;
      border-radius: 3px;
    }

    #elevation-graph {
      position: absolute;
      bottom: 10px;
      left: 10px;
      right: 10px;
      z-index: 1;
      background: rgba(255, 255, 255, 0.8);
      padding: 10px;
      border-radius: 3px;
      height: 200px;
    }
  </style>
		</head>
		<body>
			<div id="map"></div>
			<div id="layer-switcher">
				<button id="map-button">Map</button>
				<button id="satellite-button">Satellite</button>
			</div>
			<div id="elevation-graph">
				<canvas id="elevation-chart"></canvas>
			</div>
			<script>


    const geoJSONData = JSON.parse(JSON.parse(document.getElementById('jsonData').textContent))
    mapboxgl.accessToken = 'pk.eyJ1Ijoib2xpdmVyYnV0bGVyIiwiYSI6ImNsZ3NpZmlvazAxb2Mzc281dXJvb20weGgifQ.yov1u2Efo_v7ImCH2o9pGg';

    const map = new mapboxgl.Map({
      container: 'map',
      style: 'mapbox://styles/oliverbutler/cllz4ea1c00n701pbbqah10qo',
      center: [-2.9263, 54.5441],
      zoom: 12
    });

    map.on('load', () => {
      map.addSource('gpx-tracks', {
        type: 'geojson',
        data: geoJSONData
      });

      map.addLayer({
        id: 'gpx-tracks',
        type: 'line',
        source: 'gpx-tracks',
        layout: {
          'line-join': 'round',
          'line-cap': 'round'
        },
        paint: {
          'line-color': '#ff0000',
          'line-width': 3
        }
      });

      // Add start and end markers
      const coordinates = geoJSONData.features[0].geometry.coordinates;
      const start = coordinates[0];
      const end = coordinates[coordinates.length - 1];

      new mapboxgl.Marker({color: '#008000'})
        .setLngLat(start)
        .addTo(map);

      new mapboxgl.Marker({color: '#FF0000'})
        .setLngLat(end)
        .addTo(map);

      // Fit the map to the bounds of the GeoJSON data
      const bounds = new mapboxgl.LngLatBounds();
      geoJSONData.features.forEach((feature) => {
        if (feature.geometry.type === 'LineString') {
          feature.geometry.coordinates.forEach((coord) => {
            bounds.extend(coord);
          });
        }
      });
      map.fitBounds(bounds, {padding: 50});

      // Layer switcher functionality
      document.getElementById('map-button').addEventListener('click', () => {
        map.setStyle('mapbox://styles/oliverbutler/cllz4ea1c00n701pbbqah10qo');
      });

      document.getElementById('satellite-button').addEventListener('click', () => {
        map.setStyle('mapbox://styles/mapbox/satellite-v9');
      });

      map.on('style.load', () => {
        // Re-add the GPX track layer after style change
        map.addSource('gpx-tracks', {
          type: 'geojson',
          data: geoJSONData
        });

        map.addLayer({
          id: 'gpx-tracks',
          type: 'line',
          source: 'gpx-tracks',
          layout: {
            'line-join': 'round',
            'line-cap': 'round'
          },
          paint: {
            'line-color': '#ff0000',
            'line-width': 3
          }
        });
      });

      const elevationData = coordinates.map((coord, index) => {


        return {
          distance: index,
          elevation: coord[2],

        }
      });


      // Create elevation chart
      const ctx = document.getElementById('elevation-chart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: elevationData.map(d => d.distance.toFixed(0)),
          datasets: [{
            label: 'Elevation',
            data: elevationData.map(d => d.elevation),
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              title: {
                display: true,
                text: 'Distance (m)'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Elevation (m)'
              }
            }
          }
        }
      });
    });
  </script>
		</body>
	</html>
}
